// <auto-generated />
using System;
using BestStoreMVC.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BestStoreMVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250609122936_AddDeployment")]
    partial class AddDeployment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BestStoreMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BestStoreMVC.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingFee")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BestStoreMVC.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BestStoreMVC.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "ASUS",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1253),
                            Description = "ASUS ROG Zephyrus G14 GA402XZ-NC009W, 14.0, WQXGA, AMD Ryzen 9 7940HS (4.0/5.2GHz, 16M), NVIDIA RTX 4080 12 GB GDDR6 DLSS 3, 32 GB, 1 TB SSD - 90NR0DH6-M000L0",
                            ImageFileName = "asus-ga402-rog-zephyrus-g14-2023-456146.jpg",
                            Name = "ASUS ROG Zephyrus",
                            Price = 3771m
                        },
                        new
                        {
                            Id = 2,
                            Brand = "MSI",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1305),
                            Description = "MSI Titan 18 HX AI A2XWJG, 18.0, UHD+, Intel Core Ultra 9 285HX (2.8/5.5GHz, 36M), NVIDIA RTX 5090 24GB GDDR7 DLSS 4, 64 GB, 4 TB SSD - 9S7-182421-479",
                            ImageFileName = "msi-titan-18-hx-ai-a2xw-618952.jpg",
                            Name = "MSI Titan 18",
                            Price = 7544m
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Acer",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1308),
                            Description = "Acer Predator Helios Neo 16S AI PHN16S-71-96YW, 16.0, WQXGA, Intel Core Ultra 9 275HX (2.7/5.4GHz, 36M), NVIDIA RTX 5070 Ti 12GB GDDR7 DLSS 4, 32 GB, 1 TB SSD - NH.QX7EX.001",
                            ImageFileName = "acer-predator-phn16s-71-helios-neo-16s-ai-628568.jpg",
                            Name = "Acer Predator",
                            Price = 2959m
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Apple",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1310),
                            Description = "Apple MacBook Pro 14 2024, Silver, 14.2, 3024 x 1964, Apple M4 10C (2.89/4.4GHz, 4M), 10 ядра GPU Apple M4, 16 GB, 512 GB SSD - MW2W3ZE/A",
                            ImageFileName = "apple-macbook-pro-14-2024-m4-pro-max-588848.jpg",
                            Name = "Apple MacBook Pro 14",
                            Price = 2227m
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Apple",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1312),
                            Description = "Apple MacBook Pro 16 2024, Space Black, 16.2, 3456 x 2234, Apple M4 Pro 14C (4.51GHz, 4M), 20 ядра GPU Apple M4 Pro, 48 GB, 512 GB SSD - MX2Y3ZE/A",
                            ImageFileName = "apple-macbook-pro-16-2024-m4-pro-max-588869.jpg",
                            Name = " Apple MacBook Pro 16",
                            Price = 3945m
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Dell",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1315),
                            Description = "Dell XPS 16 9640, 16.3, Full HD+, Intel Core Ultra 7 155H (0.9/4.8GHz, 24M), NVIDIA RTX 4060 8GB GDDR6 DLSS 3, 32 GB, 2 TB SSD - DIABLO_MTL_2501_1200_2TBSSDNVME",
                            ImageFileName = "dell-xps-16-9640-547400.jpg",
                            Name = "Dell XPS 16",
                            Price = 4159m
                        },
                        new
                        {
                            Id = 7,
                            Brand = "HP",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1317),
                            Description = "HP ZBook Power 16 G11, 16.0, Full HD+, Intel Core Ultra 7 155H (0.9/4.8GHz, 24M), NVIDIA RTX 2000 8GB GDDR6, 64 GB, 2 TB SSD - 98N83ET_EN_64GB_2TBSSDNVME",
                            ImageFileName = "hp-zbook-power-16-g11-576189.jpg",
                            Name = "HP ZBook Power 16",
                            Price = 3209m
                        },
                        new
                        {
                            Id = 8,
                            Brand = "HP",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1319),
                            Description = "HP Elite x360 1040 G11 2-in-1, 14.0, Full HD+, touch screen, Intel Core Ultra 7 155H (0.9/4.8GHz, 24M), Intel Arc 8 Core, 32 GB, 2 TB SSD - 9G0U6ET_EN_2TBSSDNVME",
                            ImageFileName = "hp-elite-x360-1040-g11-580353.jpg",
                            Name = "HP Elite",
                            Price = 257m
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Lenovo",
                            Category = "Computers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1321),
                            Description = "Lenovo ThinkPad P16 G2, 16.0, WQXGA, Intel Core i9-13980HX (1.6/5.6GHz, 36M), NVIDIA RTX 2000 8GB GDDR6, 64 GB, 1 TB SSD - 21FA000ABM_64GB",
                            ImageFileName = "lenovo-thinkpad-p16-g2-487799.jpg",
                            Name = "Lenovo ThinkPad",
                            Price = 4726m
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Logitech",
                            Category = "Accessories",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1324),
                            Description = "Logitech G PRO X 2 LIGHTSPEED Wireless Headset, Black - 981-001263",
                            ImageFileName = "logitech-g-pro-x-2-lightspeed-cheren-462424 (1).jpg",
                            Name = "Logitech G PRO X 2 LIGHTSPEED",
                            Price = 289m
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Logitech",
                            Category = "Accessories",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1326),
                            Description = "Logitech G915 X LIGHTSPEED Clicky Wireless Gaming Keyboard, Black - 920-012709",
                            ImageFileName = "logitech-g915-x-lightspeed-wireless-gaming-keyboar-609238.jpg",
                            Name = "Logitech G915 X LIGHTSPEED Clicky",
                            Price = 284m
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Logitech",
                            Category = "Accessories",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1329),
                            Description = "Logitech Pro X Superlight Wireless Mouse, Black - 910-005880",
                            ImageFileName = "copy-of-logitech-pro-x-superlight-byal-307189.jpg",
                            Name = "Logitech Pro X Superlight",
                            Price = 150m
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Razer",
                            Category = "Accessories",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1331),
                            Description = "Razer Huntsman V3 Pro gaming keyboard, Black - RZ03-04970100-R3M1",
                            ImageFileName = "huntsman-v3-pro-us-layout-gaming-keyboard-analog-o-553027.jpg",
                            Name = "Razer Huntsman V3 Pro",
                            Price = 341m
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Brother",
                            Category = "Printers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1333),
                            Description = "Printer Brother HL-L8240CDW, Electrophotographic LED, A4, 600 x 600 dpi, Wi-Fi - HLL8240CDWYJ1",
                            ImageFileName = "brother-hl-l8240cdw-515220.jpg",
                            Name = "Printer Brother HL-L8240CDW",
                            Price = 411m
                        },
                        new
                        {
                            Id = 15,
                            Brand = "HP",
                            Category = "Printers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1335),
                            Description = "HP LaserJet Pro 4202dn Printer, Laser, A4, 600 x 600 dpi, 33 ppm - 4RA87F",
                            ImageFileName = "hp-laserjet-pro-4202dn-504550.jpg",
                            Name = "HP LaserJet Pro 4202dn",
                            Price = 448m
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Xerox",
                            Category = "Printers",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1337),
                            Description = "Xerox B410 Printer, Laser, A4, 1200 x 1200 dpi, 47 ppm - B410V_DN",
                            ImageFileName = "xerox-b410-printer-538741.jpg",
                            Name = "Xerox B410",
                            Price = 504m
                        },
                        new
                        {
                            Id = 17,
                            Brand = "GoPro",
                            Category = "Cameras",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1339),
                            Description = "Action camera GoPro HERO13 Black Creator Edition - CHDFB-131-EU",
                            ImageFileName = "copy-of-gopro-hero13-black-577320.jpg",
                            Name = "GoPro HERO13",
                            Price = 788m
                        },
                        new
                        {
                            Id = 18,
                            Brand = "GoPro",
                            Category = "Cameras",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1343),
                            Description = "Action camera GoPro HERO12 Black - CHDHX-121-RW",
                            ImageFileName = "gopro-hero12-black-488027.jpg",
                            Name = "GoPro HERO12",
                            Price = 405m
                        },
                        new
                        {
                            Id = 19,
                            Brand = "GoPro",
                            Category = "Cameras",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1345),
                            Description = "Action camera GoPro HERO11 Black Creator Edition - CHDFB-111-EU",
                            ImageFileName = "copy-of-gopro-hero11-black-405256.jpg",
                            Name = "GoPro HERO11",
                            Price = 695m
                        },
                        new
                        {
                            Id = 20,
                            Brand = "HP",
                            Category = "Other",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1347),
                            Description = "HP Professional Backpack 17.3, Black - 500S6AA",
                            ImageFileName = "hp-renew-business-backpack-up-to-17-3-531400.jpg",
                            Name = "HP Professional 17.3",
                            Price = 57m
                        },
                        new
                        {
                            Id = 21,
                            Brand = "GoPro",
                            Category = "Other",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1349),
                            Description = "Waterproof GoPro Protective Housing for GoPro HERO - ADDIV-001",
                            ImageFileName = "copy-of-za-xiaomi-mi-action-camera-4k-498463.jpg",
                            Name = "GoPro Protective Housing",
                            Price = 69m
                        },
                        new
                        {
                            Id = 22,
                            Brand = "Apple",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1351),
                            Description = "Smartphone Apple iPhone 16 Pro, 8GB, 512GB, Black Titanium - MYNM3ZD/A",
                            ImageFileName = "apple-iphone-16-pro-578268.jpg",
                            Name = "Apple iPhone 16 Pro",
                            Price = 1798m
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Apple",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1353),
                            Description = "Smartphone Apple iPhone 15, 6GB, 512GB, Blue - MTPG3RX/A",
                            ImageFileName = "apple-iphone-15-490283.jpg",
                            Name = "Apple iPhone 15",
                            Price = 1450m
                        },
                        new
                        {
                            Id = 24,
                            Brand = "Samsung",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1355),
                            Description = "Smartphone Samsung Galaxy S25+, 12GB, 256GB, Icy Blue - SM-S936BLBDEUE",
                            ImageFileName = "samsung-galaxy-s25-607464.jpg",
                            Name = "Samsung Galaxy S25+",
                            Price = 1200m
                        },
                        new
                        {
                            Id = 25,
                            Brand = "Samsung",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1357),
                            Description = "Smartphone Samsung Galaxy S24, 8GB, 128GB, Amber Yellow - SM-S921BZYDEUE",
                            ImageFileName = "samsung-galaxy-s24-527754.jpg",
                            Name = "Samsung Galaxy S24",
                            Price = 666m
                        },
                        new
                        {
                            Id = 26,
                            Brand = "Samsung",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1359),
                            Description = "Smartphone Samsung Galaxy S24 FE, 8GB, 256GB, Graphite - SM-S721BZKGEUE",
                            ImageFileName = "samsung-galaxy-s24-fe-581047.jpg",
                            Name = "Samsung Galaxy S24 FE",
                            Price = 637m
                        },
                        new
                        {
                            Id = 27,
                            Brand = "Apple",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1361),
                            Description = "Smartphone Apple iPhone 16 Plus, 8GB, 512GB, White - MY1X3ZD/A",
                            ImageFileName = "apple-iphone-16-plus-578510.jpg",
                            Name = "Apple iPhone 16 Plus",
                            Price = 1618m
                        },
                        new
                        {
                            Id = 28,
                            Brand = "Apple",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1363),
                            Description = "Smartphone Apple iPhone 16 Pro Max, 8GB, 1TB, Black Titanium - MYX43ZD/A",
                            ImageFileName = "apple-iphone-16-pro-max-578288.jpg",
                            Name = "Apple iPhone 16 Pro Max",
                            Price = 2198m
                        },
                        new
                        {
                            Id = 29,
                            Brand = "Apple",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1365),
                            Description = "Smartphone Apple iPhone 16e, 8GB, 256GB, Black - MD1T4ZD/A",
                            ImageFileName = "apple-iphone-16e-617257.jpg",
                            Name = "Apple iPhone 16e",
                            Price = 968m
                        },
                        new
                        {
                            Id = 30,
                            Brand = "Apple",
                            Category = "Phones",
                            CreatedAt = new DateTime(2025, 6, 9, 12, 29, 36, 164, DateTimeKind.Local).AddTicks(1367),
                            Description = "Smartphone Apple iPhone 14, 6GB, 128GB, Blue - MPVN3RX/A",
                            ImageFileName = "apple-iphone-14-plus-402808.jpg",
                            Name = "Apple iPhone 14",
                            Price = 742m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BestStoreMVC.Models.Order", b =>
                {
                    b.HasOne("BestStoreMVC.Models.ApplicationUser", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BestStoreMVC.Models.OrderItem", b =>
                {
                    b.HasOne("BestStoreMVC.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BestStoreMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BestStoreMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BestStoreMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BestStoreMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BestStoreMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BestStoreMVC.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BestStoreMVC.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
